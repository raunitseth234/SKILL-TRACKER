import React, { useState, useEffect } from 'react';
import { Plus, TrendingUp } from 'lucide-react';

// Components
import StripeNavbar from './components/StripeNavbar';
import SkillForm from './components/SkillForm';
import RadarChart from './components/RadarChart';
import BarChart from './components/BarChart';
import EnhancedSkillCharts from './components/EnhancedSkillCharts';
import LearningSuggestions from './components/LearningSuggestions';
import AuthModal from './components/AuthModal';
import UserNameModal from './components/UserNameModal';
import HeroSection from './components/HeroSection';
import AnimatedSkillCard from './components/AnimatedSkillCard';

// Utilities and Data
import { 
  getSkillsFromStorage, 
  saveSkillsToStorage, 
  getUserNameFromStorage, 
  saveUserNameToStorage,
  getThemeFromStorage,
  saveThemeToStorage
} from './utils/localStorage';
import { sampleSkills, sampleUserName } from './data/sampleData';
import { getContextualComment } from './data/commentSuggestions';

function App() {
  // State management
  const [skills, setSkills] = useState([]);
  const [userName, setUserName] = useState('');
  const [user, setUser] = useState(null);
  const [theme, setTheme] = useState('light');
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [isAuthModalOpen, setIsAuthModalOpen] = useState(false);
  const [isUserNameModalOpen, setIsUserNameModalOpen] = useState(false);
  const [editingSkill, setEditingSkill] = useState(null);
  const [isFirstVisit, setIsFirstVisit] = useState(true);


  // Load data from localStorage on component mount
  useEffect(() => {
    const savedSkills = getSkillsFromStorage();
    const savedUserName = getUserNameFromStorage();
    const savedTheme = getThemeFromStorage();

    // Check if this is the first visit (no saved data)
    if (savedSkills.length === 0 && !savedUserName) {
      setIsFirstVisit(true);
      // Load sample data for demonstration
      setSkills(sampleSkills);
      setUserName(sampleUserName);
      saveSkillsToStorage(sampleSkills);
      saveUserNameToStorage(sampleUserName);
    } else {
      setSkills(savedSkills);
      setUserName(savedUserName);
    }

    setTheme(savedTheme);
    applyTheme(savedTheme);
  }, []);

  // Apply theme to document
  const applyTheme = (newTheme) => {
    if (newTheme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  };

  // Save skills to localStorage whenever skills change
  useEffect(() => {
    if (skills.length > 0 || isFirstVisit) {
      saveSkillsToStorage(skills);
    }
  }, [skills, isFirstVisit]);

  // Save user name to localStorage whenever it changes
  useEffect(() => {
    if (userName) {
      saveUserNameToStorage(userName);
    }
  }, [userName]);

  // Theme toggle handler
  const handleThemeToggle = () => {
    const newTheme = theme === 'light' ? 'dark' : 'light';
    setTheme(newTheme);
    saveThemeToStorage(newTheme);
    applyTheme(newTheme);
  };

  // Skill management handlers
  const handleAddSkill = (skillData) => {
    setSkills(prevSkills => [...prevSkills, skillData]);
    setIsFormOpen(false);
  };

  const handleEditSkill = (skill) => {
    setEditingSkill(skill);
    setIsFormOpen(true);
  };

  const handleUpdateSkill = (updatedSkill) => {
    setSkills(prevSkills => {
      const previousSkill = prevSkills.find(skill => skill.id === updatedSkill.id);
      const previousScore = previousSkill ? previousSkill.skillScore : null;
      
      // Generate contextual comment based on performance
      const contextualComment = getContextualComment(updatedSkill, previousScore);
      
      const newComment = {
        id: Date.now().toString(),
        text: contextualComment,
        author: 'SkillScore AI',
        timestamp: new Date().toISOString(),
        isAutoGenerated: true
      };

      const updatedSkillWithComment = {
        ...updatedSkill,
        comments: [...(updatedSkill.comments || []), newComment]
      };

      return prevSkills.map(skill => 
        skill.id === updatedSkill.id ? updatedSkillWithComment : skill
      );
    });
    setEditingSkill(null);
    setIsFormOpen(false);
  };

  const handleDeleteSkill = (skillId) => {
    setSkills(prevSkills => prevSkills.filter(skill => skill.id !== skillId));
  };

  // Comment management handlers
  const handleAddComment = (skillId, commentText) => {
    const newComment = {
      id: Date.now().toString(),
      text: commentText,
      author: userName || 'Anonymous',
      timestamp: new Date().toISOString()
    };

    setSkills(prevSkills => 
      prevSkills.map(skill => 
        skill.id === skillId 
          ? { ...skill, comments: [...(skill.comments || []), newComment] }
          : skill
      )
    );
  };

  const handleEditComment = (skillId, commentId, newText) => {
    setSkills(prevSkills => 
      prevSkills.map(skill => 
        skill.id === skillId 
          ? {
              ...skill,
              comments: (skill.comments || []).map(comment =>
                comment.id === commentId 
                  ? { ...comment, text: newText }
                  : comment
              )
            }
          : skill
      )
    );
  };

  const handleDeleteComment = (skillId, commentId) => {
    setSkills(prevSkills => 
      prevSkills.map(skill => 
        skill.id === skillId 
          ? {
              ...skill,
              comments: (skill.comments || []).filter(comment => comment.id !== commentId)
            }
          : skill
      )
    );
  };

  const handleFormSubmit = (skillData) => {
    if (editingSkill) {
      handleUpdateSkill(skillData);
    } else {
      handleAddSkill(skillData);
    }
  };

  const handleFormClose = () => {
    setIsFormOpen(false);
    setEditingSkill(null);
  };

  // Authentication management
  const handleLogin = (userData) => {
    setUser(userData);
    setUserName(userData.name);
    saveUserNameToStorage(userData.name);
  };

  const handleLogout = () => {
    setUser(null);
    setUserName('');
    saveUserNameToStorage('');
  };

  // User name management
  const handleSaveUserName = (name) => {
    setUserName(name);
    setIsUserNameModalOpen(false);
  };

  const handleUserNameModalClose = () => {
    setIsUserNameModalOpen(false);
  };

  return (
    <div className={`min-h-screen ${theme === 'dark' ? 'dark' : ''}`}>
      {/* Stripe-inspired Navigation */}
      <StripeNavbar 
        userName={userName} 
        user={user}
        theme={theme} 
        onThemeToggle={handleThemeToggle}
        onLoginClick={() => setIsAuthModalOpen(true)}
        onLogout={handleLogout}
      />

      {/* Hero Section */}
      <HeroSection 
        userName={userName} 
        skills={skills} 
        user={user}
        onAddSkill={() => setIsFormOpen(true)}
        onViewDashboard={() => {
          // Scroll to analytics section
          document.querySelector('#analytics')?.scrollIntoView({ 
            behavior: 'smooth' 
          });
        }}
      />

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">

        {/* Section Header */}
        <div id="analytics" className="text-center mb-16">
          <h2 className="text-4xl font-bold text-gray-900 mb-4">
            Your <span className="text-gradient">Skill Analytics</span>
          </h2>
          <p className="text-xl text-gray-600 max-w-2xl mx-auto">
            Visualize your progress with interactive charts and get personalized insights
          </p>
        </div>

        {/* Add Skill Button */}
        <div className="mb-12 text-center">
          <button
            onClick={() => setIsFormOpen(true)}
            className="btn-primary flex items-center space-x-2 mx-auto transform transition-all duration-300 hover:scale-105 hover:shadow-lg"
          >
            <Plus size={20} />
            <span>Add New Skill</span>
          </button>
        </div>

        {/* Enhanced Charts Section */}
        <div className="mb-16">
          <EnhancedSkillCharts skills={skills} />
        </div>

        {/* Traditional Charts Section */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-16">
          <RadarChart skills={skills} />
          <BarChart skills={skills} />
        </div>

        {/* Learning Suggestions */}
        <div className="mb-16">
          <LearningSuggestions skills={skills} threshold={60} />
        </div>

        {/* Skills List */}
        <div className="space-y-6">
          <div className="text-center mb-8">
            <h2 className="text-3xl font-bold text-gray-900 mb-2">
              Your <span className="text-gradient">Skills Portfolio</span>
            </h2>
            <p className="text-lg text-gray-600">
              Manage and track your skills with detailed progress indicators
            </p>
          </div>
          
          {skills.length === 0 ? (
            <div className="text-center py-16">
              <div className="w-20 h-20 gradient-bg rounded-full flex items-center justify-center mx-auto mb-6">
                <TrendingUp size={32} className="text-white" />
              </div>
              <h3 className="text-2xl font-bold text-gray-900 mb-4">
                Start Your Skill Journey
              </h3>
              <p className="text-lg text-gray-600 max-w-md mx-auto mb-8">
                Add your first skill to begin tracking your progress and unlock personalized insights
              </p>
              <button
                onClick={() => setIsFormOpen(true)}
                className="btn-primary flex items-center space-x-2 mx-auto"
              >
                <Plus size={20} />
                <span>Add Your First Skill</span>
              </button>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {skills.map((skill, index) => (
                <AnimatedSkillCard
                  key={skill.id}
                  skill={skill}
                  index={index}
                  onEdit={handleEditSkill}
                  onDelete={handleDeleteSkill}
                  onAddComment={handleAddComment}
                  onEditComment={handleEditComment}
                  onDeleteComment={handleDeleteComment}
                />
              ))}
            </div>
          )}
        </div>
      </main>

      {/* Modals */}
      <SkillForm
        isOpen={isFormOpen}
        onClose={handleFormClose}
        onSubmit={handleFormSubmit}
        skill={editingSkill}
        isEditing={!!editingSkill}
      />

      <AuthModal
        isOpen={isAuthModalOpen}
        onClose={() => setIsAuthModalOpen(false)}
        onLogin={handleLogin}
        currentUser={user}
      />

      <UserNameModal
        isOpen={isUserNameModalOpen}
        onClose={handleUserNameModalClose}
        onSave={handleSaveUserName}
        currentName={userName}
      />


    </div>
  );
}

export default App; 